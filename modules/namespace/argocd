#!/bin/bash


KK_BOOTSTRAP_CURRENT_FOLDER=`dirname -- "$( readlink -f -- "$0"; )"`
KK_BOOTSTRAP_RESOURCES="$KK_BOOTSTRAP_CURRENT_FOLDER/../../config/cluster/"

autodeploy(){
  KK_AUTO_CREATION_FILE $1
  local AUTOD_NS_LENGTH=`yq ".cluster.namespaces|length" $KK_AUTO_CREATION_FILE`
  for ((i = 0 ; i < $AUTOD_NS_LENGTH ; i++ )); do
    local AUTOD_NS_NAME=`yq ".cluster.namespaces.$i.name" $KK_AUTO_CREATION_FILE`
    kubectl create ns $AUTOD_NS_NAME
    kubectl create clusterrolebinding $AUTOD_NS_NAME-default-admin-binding --clusterrole=cluster-admin --serviceaccount=$AUTOD_NS_NAME:default
    local AUTOD_APP_LENGTH=`yq ".cluster.namespaces.$i.apps|length" $KK_AUTO_CREATION_FILE`
    for ((ii = 0 ; ii < $AUTOD_APP_LENGTH ; ii++ )); do
      local AUTOD_APP_NAME=`yq ".cluster.namespaces.$i.apps.$ii.app" $KK_AUTO_CREATION_FILE`
      local AUTOD_APP_REPO=`yq ".cluster.namespaces.$i.apps.$ii.repo" $KK_AUTO_CREATION_FILE`
      local AUTOD_APP_PATH=`yq ".cluster.namespaces.$i.apps.$ii.path" $KK_AUTO_CREATION_FILE`
      local AUTOD_APP_BRANCH=`yq ".cluster.namespaces.$i.apps.$ii.branch" $KK_AUTO_CREATION_FILE`
      local AUTOD_APP_STRATEGY=`yq ".cluster.namespaces.$i.apps.$ii.strategy" $KK_AUTO_CREATION_FILE`
      argocd app create $AUTOD_APP_NAME --repo $AUTOD_APP_REPO --revision $AUTOD_APP_BRANCH --path $AUTOD_APP_PATH --dest-server https://kubernetes.default.svc --dest-namespace $AUTOD_NS_NAME --sync-policy auto
    done
  done
}


validation(){

  local KK_FILE=$1
  local KK_DIC_PATH="cluster.bootstrap.argocd"
  local KK_REQ_FIELDS=(namespace password domain tls_folder)
  local KK_REQ_ERROR=""
  
  [ ! -f "$KK_FILE" ] && KK_REQ_ERROR="File not found: $KK_FILE"

  [[ "yes true" == *"$(yq .$KK_DIC_PATH.enabled $KK_FILE)"* ]] || KK_REQ_ERROR="argocd is not enabled"

  for KK_REQ_FIELD in ${KK_REQ_FIELDS[@]};do
    if [ "$(yq .$KK_DIC_PATH.$KK_REQ_FIELD $KK_FILE)" == "null" ];then
      local KK_DEFAULT_VALUE="$(yq .$KK_DIC_PATH.$KK_REQ_FIELD  $KK_BOOTSTRAP_RESOURCES/cluster.yml)"
      yq -i ".$KK_DIC_PATH.$KK_REQ_FIELD = \"$KK_DEFAULT_VALUE\"" $KK_FILE
    fi
  done

  [ "$KK_REQ_ERROR" != "" ] && echo -e "$KK_REQ_ERROR" && return 1

  return 0

}


bootstrap(){

  yq -i ".cluster.bootstrap.argocd.apply.started = \"$(date +%F_%T)\"" $1

  validation $1
  [ "$?" == "1" ] && yq -i ".cluster.bootstrap.argocd.apply.status = \"failed before apply\"" $1 && return 1
  yq -i ".cluster.bootstrap.argocd.apply.validated = \"$(date +%F_%T)\"" $1
  
  echo "Setting Argocd from kk bootstrap..."
  apply $1
  [ "$?" == "1" ] && yq -i ".cluster.bootstrap.argocd.apply.status = \"failed after apply\"" $1 && return 1
  yq -i ".cluster.bootstrap.argocd.apply.finished = \"$(date +%F_%T)\"" $1

}


$@