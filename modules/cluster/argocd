#!/bin/bash


KK_BOOTSTRAP_CURRENT_FOLDER=`dirname -- "$( readlink -f -- "$0"; )"`
KK_BOOTSTRAP_RESOURCES="$KK_BOOTSTRAP_CURRENT_FOLDER/../../config/cluster/"


apply(){

  local KK_CLUSTER_PLAN="$1"
  
  validation $KK_CLUSTER_PLAN
  [ "$?" == "1" ] && yq -i ".cluster.bootstrap.nginx.apply.status = \"failed\"" $KK_CLUSTER_PLAN && return 1

  local KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER="${KK_CLUSTER_PLAN%/*}/bootstrap/argocd/"
  mkdir -p $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER

  # Required variables
  local KK_BOOTSTRAP_ARGOCD_NS=`yq ".cluster.bootstrap.argocd.namespace" $KK_CLUSTER_PLAN`
  local KK_BOOTSTRAP_ARGOCD_ADMIN_PASSWORD=`yq ".cluster.bootstrap.argocd.password" $KK_CLUSTER_PLAN`
  local KK_BOOTSTRAP_ARGOCD_DOMAIN_NAME=`yq ".cluster.bootstrap.argocd.domain" $KK_CLUSTER_PLAN`
  local KK_BOOTSTRAP_ARGOCD_TLS_FOLDER=`yq ".cluster.bootstrap.argocd.tls_folder" $KK_CLUSTER_PLAN`

  # TLS secrets creation
  if [ "$KK_BOOTSTRAP_ARGOCD_DOMAIN_NAME" == "rec.la" ];then
    curl -s https://www.rec.la/rec.la-bundle.crt -o $KK_BOOTSTRAP_ARGOCD_TLS_FOLDER/tls.crt 
    curl -s https://www.rec.la/rec.la-key.pem -o $KK_BOOTSTRAP_ARGOCD_TLS_FOLDER/tls.key
  fi

  # Creating Kubernetes resources
  kubectl create namespace $KK_BOOTSTRAP_ARGOCD_NS \
    --dry-run=client --output=yaml > $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER/_argocd-namespace.yml

  for KK_BOOTSTRAP_ARGOCD_SECRET_NAME_TMP in "argocd-server-tls" "argocd-repo-server-tls" "argocd-dex-server-tls"; do
  kubectl create -n $KK_BOOTSTRAP_ARGOCD_NS secret tls $KK_BOOTSTRAP_ARGOCD_SECRET_NAME_TMP \
    --cert=$KK_BOOTSTRAP_ARGOCD_TLS_FOLDER/tls.crt  \
    --key=$KK_BOOTSTRAP_ARGOCD_TLS_FOLDER/tls.key \
    --dry-run=client --output=yaml > $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER/$KK_BOOTSTRAP_ARGOCD_SECRET_NAME_TMP.yml
  done 

  # Argocd Install Script
  curl -sLo $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER/argocd-crd.yml https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.6/manifests/install.yaml

  # Argocd Ingress Creation
  cat $KK_BOOTSTRAP_RESOURCES/argocd-ingress.yml |  sed "s/\$ARGOCD_DOMAIN_NAME/$KK_BOOTSTRAP_ARGOCD_DOMAIN_NAME/g" > $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER/ingress.yml

  # Applying Manifests
  kubectl -n  $KK_BOOTSTRAP_ARGOCD_NS apply -f $KK_BOOTSTRAP_ARGOCD_PLAN_FOLDER/ &>/dev/null
  kubectl wait --namespace $KK_BOOTSTRAP_ARGOCD_NS --for=condition=ready pod --selector=app.kubernetes.io/name=argocd-server --timeout=180s &>/dev/null

  until $(curl --output /dev/null --silent --head --fail https://argocd.$KK_BOOTSTRAP_ARGOCD_DOMAIN_NAME); do
    sleep 2
  done # waiting for argocd service to start

  # Argocd setup default password from YAML
  local KK_BOOTSTRAP_ARGOCD_CURRENT_PASSWORD=""

  while [ "${#KK_BOOTSTRAP_ARGOCD_CURRENT_PASSWORD}" == 0 ]; do
    KK_BOOTSTRAP_ARGOCD_CURRENT_PASSWORD=`argocd admin initial-password -n $KK_BOOTSTRAP_ARGOCD_NS| head -n1`
  done

  argocd login argocd.$KK_BOOTSTRAP_ARGOCD_DOMAIN_NAME --username admin --password $KK_BOOTSTRAP_ARGOCD_CURRENT_PASSWORD &>/dev/null
  argocd account update-password --account admin --current-password $KK_BOOTSTRAP_ARGOCD_CURRENT_PASSWORD --new-password $KK_BOOTSTRAP_ARGOCD_ADMIN_PASSWORD &>/dev/null

  argocd cluster add -y $(kubectl config get-contexts -o name) &>/dev/null

  echo "
ðŸšœ your argocd is ready: https://argocd.rec.la
User: root
Password: $KK_BOOTSTRAP_ARGOCD_ADMIN_PASSWORD"

}


validation(){

  local KK_FILE=$1
  local KK_DIC_PATH="cluster.bootstrap.argocd"
  local KK_REQ_FIELDS=(namespace password domain tls_folder)
  local KK_REQ_ERROR=""
  
  [ ! -f "$KK_FILE" ] && KK_REQ_ERROR="File not found: $KK_FILE"

  [[ "yes true" == *"$(yq .$KK_DIC_PATH.enabled $KK_FILE)"* ]] || KK_REQ_ERROR="argocd is not enabled"

  for KK_REQ_FIELD in ${KK_REQ_FIELDS[@]};do
    if [ "$(yq .$KK_DIC_PATH.$KK_REQ_FIELD $KK_FILE)" == "null" ];then
      local KK_DEFAULT_VALUE="$(yq .$KK_DIC_PATH.$KK_REQ_FIELD  $KK_BOOTSTRAP_RESOURCES/cluster.yml)"
      yq -i ".$KK_DIC_PATH.$KK_REQ_FIELD = \"$KK_DEFAULT_VALUE\"" $KK_FILE
    fi
  done

  [ "$KK_REQ_ERROR" != "" ] && echo -e "$KK_REQ_ERROR" && return 1

  return 0

}


bootstrap(){

  yq -i ".cluster.bootstrap.argocd.apply.started = \"$(date +%F_%T)\"" $1

  validation $1
  [ "$?" == "1" ] && yq -i ".cluster.bootstrap.argocd.apply.status = \"failed before apply\"" $1 && return 1
  yq -i ".cluster.bootstrap.argocd.apply.validated = \"$(date +%F_%T)\"" $1
  
  echo "Setting Argocd from kk bootstrap..."
  apply $1
  [ "$?" == "1" ] && yq -i ".cluster.bootstrap.argocd.apply.status = \"failed after apply\"" $1 && return 1
  yq -i ".cluster.bootstrap.argocd.apply.finished = \"$(date +%F_%T)\"" $1

}


$@