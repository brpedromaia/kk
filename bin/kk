#!/bin/bash

kk_cluster(){
   case "$1" in
    get) echo $(kind get clusters | tr "\n" " ");;
    delete) kind delete cluster -n $2;;
  esac
}

kk_k8s(){
  local KK_CUSTOM_CMD=()
  local NEW_ENTRY=$2

  case "$1" in
    ns|namespace) KK_CUSTOM_CMD=("Namespace" "kk get ns" "kubectl get ns $NEW_ENTRY" "kubectl config set-context --current --namespace=$NEW_ENTRY");;
    ct|context) KK_CUSTOM_CMD=("Context" "kubectl config get-contexts -o name" "kubectl config get-contexts $NEW_ENTRY" "kubectl config use-context $NEW_ENTRY ");;
    *) echo "kk_k8s missing feature" ;; 
  esac
  
  if [ "$NEW_ENTRY" == "" ] ;then
    echo $(${KK_CUSTOM_CMD[1]})
  elif [ "$NEW_ENTRY" != "$KK_CONTEXT" ] ;then 
    $(${KK_CUSTOM_CMD[2]}) &>/dev/null
    if [ "$?" == "0" ];then
      $("${KK_CUSTOM_CMD[3]}")
      echo "${KK_CUSTOM_CMD[0]} has changed to $NEW_ENTRY"
    else
      echo "${KK_CUSTOM_CMD[0]} $NEW_ENTRY not found"
    fi
  fi
}

help(){
  echo -e "Usage:
    kk [command] [args]

    bootstrap           embed bootstrap features to quick start your cluster
                        features: cluster, nginx-cluster-ingress, argocd
                        
    # argocd --help        Argocd Commands

  "
}


kk_main(){
  KK_CURRENT_FOLDER=`dirname -- "$( readlink -f -- "$0"; )"`
  case "$1" in
    bootstrap) $KK_CURRENT_FOLDER/../modules/bootstrap $@;;
    ns|namespace|ct|context) kk_k8s $1 $2 ;;
    create|get|delete) 
      case "$2" in
        cluster|clusters) kk_cluster $@;;
        *) kubectl $@ ;; 
      esac
    ;;
    pretty_bash) pretty_bash;;
    ""|help) help;;
    *) kk_main get $@ ;; 
  esac
}

kk_main $@