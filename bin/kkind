#!/bin/bash

ingress_bootstrap() {

  export KUBECTL_CONTEXT=$(kubectl config current-context 2>&1| sed "s/.*not set/none/g")
  
  kubectl apply --filename https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/kind/deploy.yaml
  kubectl -n ingress-nginx patch deployment ingress-nginx-controller --type=json \
  -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--enable-ssl-passthrough"}]'
  kubectl wait --namespace ingress-nginx \
    --for=condition=ready pod \
    --selector=app.kubernetes.io/component=controller \
    --timeout=180s
}

 singlenode() { 
  if [ -z "$1" ];then
    echo -e "singlenode requires CLUSTER_NAME args.\nexample: kkind singlenode mycluster"
  else
    kind create cluster -n $1 && ingress_bootstrap
  fi
 }


 multinode() { 

  if [ -z "$1" ] | [ -z "$2" ];then
    echo -e "multinode requires CLUSTER_SIZE and CLUSTER_NAME args.\nexample: kkind multinode 3 mycluster"
  else
    for ((i = 0 ; i < $1 ; i++ )); do
      echo "- role: worker" >>/usr/local/kind-container/autocreation/kind-config.yml
    done
    kind create cluster -n $2 --config /usr/local/kind-container/autocreation/kind-config.yml && ingress_bootstrap
  fi
 }

get_clusters(){
 echo $(kind get clusters | tr "\n" " ")
}

delete() {
  local AUTOD_CLUSTER_NAME=`yq ".cluster.name" $KK_AUTO_CREATION_FILE`
  kind delete cluster -n $AUTOD_CLUSTER_NAME
}

$@
